-- 1. Praktikum Wiederhohlung

-- 2. Erweiterung des Datenmodelles
--a)
SELECT Distinct LEFT (KunPLZ, 2)
from Kunde

--b)
SELECT * INTO Niederlassung from trommelhelden..quelleNiederlassung
Alter table Niederlassung add primary key (NLNr)

SELECT * into Gebiet from trommelhelden..quelleGebiet
Alter table Gebiet add primary key (GebietID)
Alter Table Gebiet add Foreign key (NLNr) references Niederlassung (NLNr)

Select * from Niederlassung
Select * from Gebiet

--c)
SELECT * From Mitarbeiter
Alter Table Mitarbeiter Add NLNr int default null

--d) 
Update Mitarbeiter 
SET NLNr = (select N.NLNr from Niederlassung N where n.Ort LiKE Mitarbeiter.MitEinsatzort

--e)
Alter table Mitarbeiter Drop column MitEinsatzort

--f)
ALter Table Mitarbeiter ADD Foreign key (NLNr) references Niederlassung (NLNr)

-- 3. Datenmodell
select AufNr
from Auftrag
where MitID in (Select MitID from Mitarbeiter Where MItJob = 'Meister')

SELECT MitName
From Mitarbeiter 
Where NLNr in (Select NLNr from Niederlassung where Ort = 'Dresden')

SELECT AufNr
From Auftrag
Where MitID in (Select MitID from Mitarbeiter Where MitStundensat > 80)

--4.Daten importieren
Select * From Auftrag
Select * From Montage
insert into Auftrag Select * from trommelhelden..quelledbs2Auftrag
insert into Montage Select * from trommelhelden..quelledbs2Montage

--tabelle Rechnung
Create Table Rechnung(
KunNr int Not null,
AufNR int Not null,
RechDAt date not null,
RechBetrag smallmoney not null,
 Primary Key(KunNR,AufNR))

 Alter table Rechnung add foreign key (KunNr) references Kunde (KunNr)
 Alter table Rechnung add foreign key (AufNr) references Auftrag (Aufnr)

 --6.View
  Create View Zuständigkeit AS
  Select a.Aufnr, a.KunNr ,m.MitId 
  From Auftrag a 
  join Kunde k on a.KunNr = k.KunNr
  join Gebiet g on g.GebietID = Left(KunPLZ, 2)
  join Mitarbeiter m on m.NLNr = g.NLNr
  Where a.MitID is null
  select * from Zuständigkeit

  --Meilenstein 2
  -- 4
  CREATE TABLE artikel (
 aid INT PRIMARY KEY,
 bezeichnung VARCHAR(30),
 bestand INT CHECK (bestand>=0),
 preis DECIMAL(10,2) CHECK (preis>=0)
)
INSERT INTO artikel VALUES(111, 'Stuhl', 1200, 23.60)
INSERT INTO artikel VALUES(112, 'Sofa', 100, 223.60)
INSERT INTO artikel VALUES(113, 'Sessel', 66, 123.60)
INSERT INTO artikel VALUES(115, 'Tisch', 20, 20.00)
INSERT INTO artikel VALUES(117, 'Regal', 12, 3.99)

--a)

begin transaction
Select * from artikel
Update artikel 
set bezeichnung = 'Couch'
Where bezeichnung = 'Sofa'

Select * from artikel
rollback
Select * From artikel
--b)

begin transaction
Select * from artikel
Update artikel 
set bezeichnung = 'Couch'
Where bezeichnung = 'Sofa'

Commit
Select * From artikel

--c)
begin transaction 
Select * from artikel
Set XACT_ABORT on
declare @menge_sessel int= 10
declare @menge_tisch int= 10 
Update artikel
Set bestand -= @menge_sessel
where bezeichnung = 'Sessel'
Update artikel
Set bestand -= @menge_tisch
where bezeichnung = 'Tisch'
select * from artikel
rollback
select * from artikel

-- korrektur und so 
Update artikel
set bestand +=10 
where bezeichnung = 'Sessel'

begin transaction 
Select * from artikel
Set XACT_ABORT on
declare @menge_sessel2 int= 25
declare @menge_tisch2 int= 25
Update artikel
Set bestand -= @menge_sessel2
where bezeichnung = 'Sessel'
Update artikel
Set bestand -= @menge_tisch2
where bezeichnung = 'Tisch'
select * from artikel
rollback
select * from artikel

--4. d)
Begin Transaction T4d
	Declare @menge_stuhl Int;
	Set @menge_stuhl = 500;
	Declare @summe Int;
	Update artikel set bestand += @menge_stuhl where bezeichnung ='Stuhl'
	Set @summe = (Select Sum(bestand) from artikel);
	if(@summe > 2000)
		Begin
		Print 'Das war zu viel :( Maximal 2000 Artikel'
		rollback
		end 
	else
		begin
		Print 'Ok Meister hab ich gemacht'
		commit
		end
Select Sum(bestand) from artikel
Update artikel set bestand -= 500 where bezeichnung ='Stuhl'

--5 a)

-- T1
SET TRANSACTION ISOLATION LEVEL
repeatable read
BEGIN TRANSACTION
-- r1(A)
SELECT aid,preis FROM Artikel
WHERE aid=111
waitfor delay '00:00:10'
--w1(B)
UPDATE Artikel set bestand=500
WHERE aid = 113
COMMIT

-- T2
SET TRANSACTION ISOLATION LEVEL
READ UNCOMMITTED
BEGIN TRANSACTION
-- r2(B)
SELECT aid,bestand FROM Artikel
WHERE aid = 113
waitfor delay '00:00:10'
-- w2(A)
UPDATE Artikel set preis=350
WHERE aid=111
COMMIT

--a)
--Hier entsteht kein deadlock da das Read uncommitted nur kurze x-Sperren verwendet und damit das lesen bzw schreiben nicht beeinflusst wird
--b
--Hier entsteht kein Deadlock da das Read Committed nur Lange x-Sperren und kurze sSperren verwendet und da nach dem Schreiben kein lesen mehr stattfindet
--c) 
--Hier entsteht ein Deadlock weil eine Lange S-Sperre den Schreibvorgang beider objekte verhindert

--)d
--T1
SET TRANSACTION ISOLATION LEVEL
repeatable read
BEGIN TRANSACTION
-- r1(A)
SELECT aid,preis FROM Artikel
WHERE aid=111
waitfor delay '00:00:10'
--w1(B)
UPDATE Artikel set bestand=500
WHERE aid = 113
Update Artikel set bestand=20
where aid = 115
COMMIT

select * from artikel

--e)
-- T2
SET TRANSACTION ISOLATION LEVEL
repeatable read
set DEADLOCK_PRIORITY  high
BEGIN TRANSACTION
-- r2(B)
SELECT aid,bestand FROM Artikel
WHERE aid = 113
waitfor delay '00:00:10'
-- w2(A)
UPDATE Artikel set preis=350
WHERE aid=111
COMMIT


--MEILENSTEIN 3

--Aufgabe 1
--Skalar
Create function Anfahrtspreis(@Anfahrt int)
Returns decimal(5,2)
As
	Begin
	Declare @Anfahrtpreis decimal(5,2)
	Set @Anfahrtpreis = 2.5 * @Anfahrt + 30
	Return @Anfahrtpreis
	End

Select AufNr, Anfahrt, dbo.Anfahrtspreis(Anfahrt) as Anfahrtspreis from Auftrag Where Anfahrt is not null

--Tabelle
Create function MindestET (@Mindestbestand int)
Returns @table Table
( EtID char(5),
  EtBezeichnung char(30),
  EtAnzLager int
)
As
Begin
	Insert into @table
	Select EtID, EtBezeichnung, EtAnzLager
	From Ersatzteil
	Where EtAnzLager < @Mindestbestand
	Return
End

Declare @Mindest int
Set @Mindest = 50
Select EtID, EtBezeichnung, EtAnzLager From MindestET(@Mindest)


--Aufgabe 2
--Default
Alter Table Mitarbeiter Add Constraint DF_Tätigkeit Default 'Monteur' For MitJob
Select * from Mitarbeiter
Insert into Mitarbeiter (MitID, MitName, MitVorname, MitGebDat, MitStundensat, NLNr) Values (113, 'Pfund', 'Robert', GetDate(), 80, 1)

Alter Table Auftrag Add Constraint DF_Eingang Default Getdate() For AufDat
Select * from Auftrag
Insert into Auftrag (Aufnr, MitID, KunNr) Values (13000, 113, 1501)
Delete from Auftrag where Aufnr = 13000

--Check
Alter Table Auftrag Add Constraint CK_Datum Check (datediff(day, AufDat, ErlDat) >= 0)
Select * from Auftrag

Select * from Mitarbeiter
Alter Table Mitarbeiter Add Constraint CK_MitID Check (MitID between 100 and 999)


--Foreign Key
--Löschen per Randleiste (Tables > Montage > Keys) //BAUSTELLE
Alter table Montage add constraint fk_Aufnr foreign key (Aufnr) references Auftrag(Aufnr) on Delete Cascade
Select * from Auftrag
Select * from Montage
Select Min(AufDat) from Auftrag Where month(AufDat)=5

--3 Trigger
CREATE TRIGGER Stundensatz_Trigger
ON Mitarbeiter
AFTER
INSERT , UPDATE, DELETE
AS 
IF ((Select COUNT(*) From Inserted m where (m.MitJob LIKE 'Monteur' or m.MitJob like 'Meister') and m.MitStundensat  is null) > 0)
BEGIN 
RAISError ('Für Meister und Monteure müssen Stundensätze angegeben werden', 16, 10)
ROLLBACK
End

Drop Trigger Stundensatz_Trigger
--a) funktioniert
insert into Mitarbeiter (MitID, MiTName, MitVorname, MitGebDat, MitJob) Values (114, 'Freund', 'Kevin', Convert (date,'2000-01-01'), 'Azubi')
--b) Trigger setzt ein
Update Mitarbeiter 
Set MItJob = 'Monteur'
where MitId = 114
SELECT * From Mitarbeiter
--c)
Update Mitarbeiter 
Set MItJob = 'Monteur', MitStundensat = 80
where MitId = 114
SELECT * From Mitarbeiter


--3.2
Create Trigger Rechnung_Erledigt 
On Rechnung 
After insert, Update AS
IF ((Select Count(*) from inserted i join Auftrag a on i.AufNr = a.AufNR Where (a.ErlDat is null or a.Dauer is null or a.Anfahrt is null)) > 0)  
BEGIN 
RAISError ('Rechnung kann noch nicht verbucvht werden weil auftrag noch nicht beendet ist', 16, 10)
ROLLBACK
End

